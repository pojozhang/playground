buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.47.0'
}

apply from: 'docker/docker.gradle'

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

test {
    useJUnitPlatform()
}

ext {
    lombokVersion = '1.18.28'
    junitVersion = '5.9.3'
    springBootVersion = '3.1.1'
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    compileOnly(
            "org.projectlombok:lombok:$lombokVersion",
    )

    implementation(
            'javax.persistence:javax.persistence-api:2.2',
            'org.jetbrains:annotations:24.0.1',
            'org.apache.commons:commons-lang3:3.12.0',
            'commons-io:commons-io:2.13.0',
            'com.google.guava:guava:32.1.1-jre',
            'com.alibaba:fastjson:2.0.35',
            'cglib:cglib-full:2.0.2',
            'com.rabbitmq:amqp-client:5.18.0',
            'com.rabbitmq:http-client:5.0.0',
            'org.apache.kafka:kafka-clients:3.5.0',
            "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-aop:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
    )

    implementation('org.apache.zookeeper:zookeeper:3.8.2') {
        exclude module: 'slf4j-log4j12'
    }

    runtimeOnly(
            'com.h2database:h2:2.2.220',
    )

    testImplementation(
            'org.elasticsearch:elasticsearch:7.17.10',
            'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.17.10',
            'org.elasticsearch:elasticsearch-core:7.17.10',
            'io.lettuce:lettuce-core:6.2.5.RELEASE',
            'org.assertj:assertj-core:3.24.2',
            'org.awaitility:awaitility:4.2.0',
            'org.junit.platform:junit-platform-launcher:1.9.3',
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.junit.vintage:junit-vintage-engine:$junitVersion",
            "org.springframework.boot:spring-boot-starter-test:$springBootVersion",
    )

    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
    )
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
}